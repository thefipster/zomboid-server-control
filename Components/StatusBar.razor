@using TheFipster.Zomboid.ServerControl.Data;
@using System.Timers;

@inject IJSRuntime JsRuntime
@inject ServerConfigService ServerConfig
@inject DockerInteropService DockerInterop

<div id="fip-status-bar">
    <span title="Active configuration file">
        <i class="fa-solid fa-file-code"></i>
        @iniFile
    </span>
    <span title="Status of the Docker Daemon">
        <i class="fa-brands fa-docker"></i>
        @dockerStatus
    </span>
    <span title="Linked Zomboid Game Container">
        <i class="fa-solid fa-microchip"></i>
        @containerId
    </span>
    <span title="State of the Container">
        <i class="fa-solid fa-server"></i>
        @containerState
    </span>
    <span title="Status of the Container">
        <i class="fa-solid fa-stopwatch"></i>
        @containerStatus
    </span>
</div>

@code {
    Timer timer = new Timer(1000);

    bool firstPing = false;
    bool dockerOnline = false;
    string dockerStatus = "not ready yet";
    bool containerFound = false;
    string containerId = "not ready yet";
    string containerStatus = "not ready yet";
    string containerState = "not ready yet";
    string iniFile = "not ready yet";

    protected override void OnInitialized()
    {
        timer.Elapsed += pingDocker;
        timer.Start();
    }

    private async void pingDocker(object? sender, ElapsedEventArgs e)
    {
        firstPing = true;
        iniFile = ServerConfig.GetIniFilename();

        dockerOnline = await DockerInterop.PingAsync();
        if (!dockerOnline)
        {
            dockerStatus = "stopped";
            containerId = string.Empty;
            containerFound = false;
            containerState = string.Empty;
            containerStatus = string.Empty;
        }
        else
        {
            dockerStatus = "active";
            containerId = await DockerInterop.GetLinkedIdAsync(16);
            if (string.IsNullOrWhiteSpace(containerId))
            {
                containerFound = false;
            }
            else
            {
                containerFound = true;
                containerState = await DockerInterop.GetLinkedStateAsync();
                containerStatus = await DockerInterop.GetLinkedStatusAsync();
            }
        }

        await InvokeAsync(StateHasChanged);
    }
}
