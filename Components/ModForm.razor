@using TheFipster.Zomboid.ServerControl.Models;

@inject IJSRuntime JsRuntime

<div id="fip-mod-form">
    <h2>
        <i class="bi bi-plus-square"></i>
        Add Mod
    </h2>

    <EditForm Model="@formData" OnValidSubmit="@formSubmit">
        <DataAnnotationsValidator />

        <div class="fip-input-wrap">
            <label for"modids">Workshop Name</label>
            <InputText id="modName"
                       placeholder="Brita's weapons pack"
                       name="modName"
                       @bind-Value="formData.ModName" />
        </div>

        <div class="fip-input-wrap">
            <label for"workshopids">Workshop Item</label>
            <InputText id="workshopitem"
                       placeholder="123456789"
                       name="workshopitem"
                       @bind-Value="formData.WorkshopId" />
        </div>

        <div class="fip-input-wrap">
            <label for"workshopids">Mod ID</label>
            <InputText id="modid"
                       placeholder="brita"
                       name="modid"
                       @bind-Value="formData.ModId" />
        </div>

        <button id="add-btn" type="submit" class="fip-button">
            Add
        </button>

        <ValidationSummary />
    </EditForm>
</div>

@code {
    [Parameter]
    public EventCallback<ModConfig> OnModAdded { get; set; }

    private ModFormData formData = new();

    protected override async void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            await JsRuntime.InvokeVoidAsync("interop.focusForm");
        }
    }

    private async Task formSubmit()
    {
        var mod = new ModConfig(formData);
        formData.Reset();
        await OnModAdded.InvokeAsync(mod);
    }
}
