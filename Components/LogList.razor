@using TheFipster.Zomboid.ServerControl.Data;

@inject DockerInteropService DockerInterop
@inject IJSRuntime JsRuntime

<div id="fip-logs">
    <h2><i class="bi bi-file-text"></i> Server logs</h2>
    <ul id="fip-log-list">
        @foreach (var log in logs)
        {
            <li>
                @log
            </li>
        }
    </ul>
    <button id="showmods-btn" class="fip-button" @onclick="() => onShowModsClickAsync()">
        Don't care, take me back <span class="fip-smaller">(when the server is ready this happens automatically)</span>
    </button>
</div>

@code {
    private const string DefaultMessage = "Container is starting, when it becomes ready to report the log stream will be shown here.";

    private string[] logs { get; set; } = new[] { DefaultMessage };

    DockerLogPuller? logPuller;

    protected override void OnInitialized()
    {
        logPuller = new DockerLogPuller(DockerInterop);
        logPuller.LogsPulled += onLogsPulledAsync;
    }

    public void Start() => logPuller?.Start();

    private async Task onLogsPulledAsync(object sender, string[] logs)
    {
        await InvokeAsync(async () =>
        {
            if (logs.Any())
                this.logs = logs;

            StateHasChanged();

            if (logs.Any(x => x.Contains("Zomboid Steam Server started")))
                await onShowModsClickAsync();
        });
    }


    private async Task onShowModsClickAsync()
    {
        logPuller?.Stop();
        await JsRuntime.InvokeVoidAsync("interop.showMods");
        string[] logs = { "Zomboid Container is restarting. It might take a bit until logs can be received." };
    }
}
