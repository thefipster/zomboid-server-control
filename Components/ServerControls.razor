@using System.Timers;
@using TheFipster.Zomboid.ServerControl.Data;
@using TheFipster.Zomboid.ServerControl.Services;

@inject IJSRuntime JsRuntime
@inject ServerConfigService ServerConfig
@inject DockerInteropService DockerInterop

<div id="fip-controls">
    <h2>
        <i class="bi bi-hdd-stack"></i>
        Controls
    </h2>

    @if (dockerOnline && containerFound && containerState == "running")
    {
        <button id="restart-btn" class="fip-button" @onclick="onRestartClick">
            @btnText
        </button>
    }
    else
    {
        <button disabled id="restart-btn" class="fip-button" @onclick="onRestartClick">
            @btnText
        </button>
    }


</div>

@code {
    [Parameter]
    public EventCallback OnRestartConfirmed { get; set; }

    const string DefaultText = "Restart";
    string btnText = DefaultText;
    ConfirmTimer timer = new ConfirmTimer(2000, 2);
    Timer pingTimer = new Timer(1000);

    bool firstPing = false;
    bool dockerOnline = false;
    string dockerStatus = "not ready yet";
    bool containerFound = false;
    string containerId = "not ready yet";
    string containerStatus = "not ready yet";
    string containerState = "not ready yet";
    string iniFile = "not ready yet";

    protected override void OnInitialized()
    {
        timer.ResultReached += onRestartTriggerAsync;
        pingTimer.Elapsed += pingDocker;
        pingTimer.Start();
    }

    private void onRestartClick()
    {
        btnText = $"Click again {timer.ClicksLeft}x";
        timer.Click();
    }

    private async Task onRestartTriggerAsync(object? sender, bool isConfirmed)
    {
        timer.Reset();
        await InvokeAsync(() =>
        {
            btnText = DefaultText;
            StateHasChanged();
        });

        if (isConfirmed)
            await OnRestartConfirmed.InvokeAsync();
    }

    private async void pingDocker(object? sender, ElapsedEventArgs e)
    {
        firstPing = true;
        iniFile = ServerConfig.GetIniFilename();

        dockerOnline = await DockerInterop.PingAsync();
        if (!dockerOnline)
        {
            dockerStatus = "stopped";
            containerId = string.Empty;
            containerFound = false;
            containerState = string.Empty;
            containerStatus = string.Empty;
        }
        else
        {
            dockerStatus = "active";
            containerId = await DockerInterop.GetLinkedIdAsync(16);
            if (string.IsNullOrWhiteSpace(containerId))
            {
                containerFound = false;
            }
            else
            {
                containerFound = true;
                containerState = await DockerInterop.GetLinkedStateAsync();
                containerStatus = await DockerInterop.GetLinkedStatusAsync();
            }
        }

        await InvokeAsync(StateHasChanged);
    }
}
